#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'mini-sed'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/mini-sed` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/mini-sed now"
  exit 64
end

include GLI::App

program_desc 'Programme qui emule sed -- de facon (tres) simplifiee'

version MiniSed::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Execution sans emission par defaut des ligne traitees sur la sortie'
switch [:q,:quiet]

desc 'Execution avec modification directe du fichier traite'
arg_name 'extension'
flag [:i,:in_place]

desc 'Substitue un mofif par un chaine dans les lignes'
arg_name 'motif chaine [fichier...]'
command :substitute do |c|
  c.desc 'Substitution globale'
  c.switch :g

  c.action do |global_options,options,args|
    quiet = '--quiet ' if global_options[:quiet]
    in_place = "--in-place='#{global_options[:in_place]}" if global_options[:in_place]
    global = 'g' if options[:g]
    motif = args.shift
    chaine = args.shift

    fichiers = args.empty? ? [IO] : args.map{|f| File.open(f)}
    fichiers.each do |f|
      puts MiniSed.substitute(quiet, motif,chaine, global,f.readlines)
    end
  end
end

desc 'Describe insert here'
arg_name 'Describe arguments to insert here'
command :insert do |c|
  c.action do |global_options,options,args|
    puts "insert command ran"
  end
end

desc 'Describe delete here'
arg_name 'Describe arguments to delete here'
command :delete do |c|
  c.action do |global_options,options,args|
    puts "delete command ran"
  end
end

desc 'Describe print here'
arg_name 'Describe arguments to print here'
command :print do |c|
  c.action do |global_options,options,args|
    puts "print command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
